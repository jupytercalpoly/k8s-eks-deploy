---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Amazon EKS Deployment for Jupyter ES'

Parameters:

  VpcBlock:
    Type: String
    Default: 10.42.0.0/16
    Description: The CIDR range for the VPC. This should be a valid private (RFC 1918) CIDR range.

  PrivateSubnetABlock:
    Type: String
    Default: 10.42.1.0/24
    Description: CidrBlock for private subnet A within the VPC

  PublicSubnetABlock:
    Type: String
    Default: 10.42.2.0/24
    Description: CidrBlock for public subnet A within the VPC

  PrivateSubnetBBlock:
    Type: String
    Default: 10.42.3.0/24
    Description: CidrBlock for private subnet B within the VPC

  PublicSubnetBBlock:
    Type: String
    Default: 10.42.4.0/24
    Description: CidrBlock for public subnet B within the VPC

  PrivateSubnetCBlock:
    Type: String
    Default: 10.42.5.0/24
    Description: CidrBlock forprivate subnet C within the VPC

  PublicSubnetCBlock:
    Type: String
    Default: 10.42.6.0/24
    Description: CidrBlock for public subnet C within the VPC

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Worker Network Configuration"
        Parameters:
          - VpcBlock
          - PublicSubnetABlock
          - PrivateSubnetABlock
          - PublicSubnetBBlock
          - PrivateSubnetBBlock
          - PublicSubnetCBlock
          - PrivateSubnetCBlock

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:  !Ref VpcBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-VPC'

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"

  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  NATIPA:
    Type: "AWS::EC2::EIP"
    Properties: 
      Domain: !Ref VPC

  # NATIPB:
  #   Type: "AWS::EC2::EIP"
  #   Properties: 
  #     Domain: !Ref VPC

  # NATIPC:
  #   Type: "AWS::EC2::EIP"
  #   Properties: 
  #     Domain: !Ref VPC

  NATGatewayA:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId:
        Fn::GetAtt:
        - NATIPA
        - AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags:
      - Key: Name
        Value: NATGatewayA

  # NATGatewayB:
  #   Type: "AWS::EC2::NatGateway"
  #   Properties:
  #     AllocationId:
  #       Fn::GetAtt:
  #       - NATIPB
  #       - AllocationId
  #     SubnetId: !Ref PublicSubnetB
  #     Tags:
  #     - Key: Name
  #       Value: NATGatewayB

  # NATGatewayC:
  #   Type: "AWS::EC2::NatGateway"
  #   Properties:
  #     AllocationId:
  #       Fn::GetAtt:
  #       - NATIPC
  #       - AllocationId
  #     SubnetId: !Ref PublicSubnetC
  #     Tags:
  #     - Key: Name
  #       Value: NATGatewayA

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public Subnets
      - Key: Network
        Value: Public

  PublicRoute:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private Subnet A
      - Key: Network
        Value: Private

  PrivateRouteA:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref NATGatewayA

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Private Subnet A
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: PrivateSubnetABlock
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-PrivateSubnetA"

  # PrivateSubnetB:
  #   Type: AWS::EC2::Subnet
  #   Metadata:
  #     Comment: Private Subnet B
  #   Properties:
  #     AvailabilityZone:
  #       Fn::Select:
  #       - '1'
  #       - Fn::GetAZs:
  #           Ref: AWS::Region
  #     CidrBlock:
  #       Ref: PrivateSubnetBBlock
  #     VpcId:
  #       Ref: VPC
  #     Tags:
  #     - Key: Name
  #       Value: !Sub "${AWS::StackName}-PrivateSubnetB"

  # PrivateSubnetC:
  #   Type: AWS::EC2::Subnet
  #   Metadata:
  #     Comment: Private Subnet C
  #   Properties:
  #     AvailabilityZone:
  #       Fn::Select:
  #       - '2'
  #       - Fn::GetAZs:
  #           Ref: AWS::Region
  #     CidrBlock:
  #       Ref: PrivateSubnetCBlock
  #     VpcId:
  #       Ref: VPC
  #     Tags:
  #     - Key: Name
  #       Value: !Sub "${AWS::StackName}-PrivateSubnetC"

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Public Subnet A
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: PublicSubnetABlock
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-PublicSubnetA"

  # PublicSubnetB:
  #   Type: AWS::EC2::Subnet
  #   Metadata:
  #     Comment: Public Subnet B
  #   Properties:
  #     AvailabilityZone:
  #       Fn::Select:
  #       - '1'
  #       - Fn::GetAZs:
  #           Ref: AWS::Region
  #     CidrBlock:
  #       Ref: PublicSubnetBBlock
  #     VpcId:
  #       Ref: VPC
  #     Tags:
  #     - Key: Name
  #       Value: !Sub "${AWS::StackName}-PublicSubnetB"

  # PublicSubnetC:
  #   Type: AWS::EC2::Subnet
  #   Metadata:
  #     Comment: Public Subnet C
  #   Properties:
  #     AvailabilityZone:
  #       Fn::Select:
  #       - '2'
  #       - Fn::GetAZs:
  #           Ref: AWS::Region
  #     CidrBlock:
  #       Ref: PublicSubnetCBlock
  #     VpcId:
  #       Ref: VPC
  #     Tags:
  #     - Key: Name
  #       Value: !Sub "${AWS::StackName}-PublicSubnetC"

  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTableA

  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable

  # Subnet03RouteTableAssociation:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     SubnetId: !Ref Subnet03
  #     RouteTableId: !Ref RouteTable

Outputs:

  SubnetIds:
    Description: All subnets in the VPC
    Value: !Join [ ",", [ !Ref PublicSubnetA, !Ref PrivateSubnetA ] ]

  # SecurityGroups:
  #   Description: Security group for the cluster control plane communication with worker nodes
  #   Value: !Join [ ",", [ !Ref ControlPlaneSecurityGroup ] ]

  VpcId:
    Description: The VPC Id
    Value: !Ref VPC